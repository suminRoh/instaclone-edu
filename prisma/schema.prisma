// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id Int @id @default(autoincrement())
  firstName String
  lastName String?
  username String @unique
  email String @unique
  password String
  bio String?
  avatar String?
  followers User[] @relation("FollowRelation",references: [id])
  following User[] @relation("FollowRelation",references: [id])
  photos Photo[]
  likes Like[]
  comments Comment[]
  rooms Room[]
  message Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Photo {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references:[id])
  userId Int
  file String
  caption String?
  hashtags Hashtag[]
  likes Like[]
  comments Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hashtag {
  id Int @id @default(autoincrement())
  hashtag String @unique
  photos Photo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like{
  id Int @id @default(autoincrement())
  photo Photo @relation(fields: [photoId],references:[id])
  photoId Int
  user User @relation(fields: [userId],references:[id])
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([photoId,userId])
}

model Comment{
  id Int @id @default(autoincrement())
  photo Photo @relation(fields: [photoId],references:[id])
  photoId Int
  user User @relation(fields: [userId],references:[id])
  userId Int
  payload String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

model Room{
  id Int @id @default(autoincrement())
  users User[]
  messaegs Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message{
  id Int @id @default(autoincrement())
  payload String
  user User @relation(fields: [userId],references:[id])
  userId Int
  room Room @relation(fields: [roomId],references:[id])
  roomId Int 
  read Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


//user는 Relation으로 설정된(@relation) 타입(User)의 id(references)를 참조해서 userId(fields)에 저장하고, userId를 사용해서 User 객체에 접근하는 매커니즘 정의한 속성입니다.